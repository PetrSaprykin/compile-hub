// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π FileItem —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º useFileActions

import React from "react"
import {
  DropdownMenu,
  type MenuItem
} from "@/components/ui/DropdownMenu/DropdownMenu"
import { useFileActions } from "@/hooks/useFileActions"
import styles from "./FileItem.module.css"

interface FileItemProps {
  id: number
  name: string
  type: "file" | "folder"
  folder?: number | null
  size?: string
  modified?: string
  className?: string
  fileListRef?: React.RefObject<HTMLDivElement>
  onClick?: () => void

  // Drag & drop –ø—Ä–æ–ø—Å—ã
  isSelected?: boolean
  isDragMode?: boolean
  canDropHere?: boolean
  onSelectForMove?: () => void
  onDropHere?: () => void
}

export const FileItem: React.FC<FileItemProps> = ({
  id,
  name,
  type,
  folder,
  size,
  modified,
  className = "",
  onClick,
  isSelected = false,
  isDragMode = false,
  canDropHere = false,
  onSelectForMove,
  onDropHere
}) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ –¥–µ–π—Å—Ç–≤–∏–π
  const {
    handleRename,
    handleDelete,
    handleDownload,
    handleMove,
    handleShowInfo
  } = useFileActions({
    onMove: () => onSelectForMove?.(),
    showNotification: (message, type) => {
      console.log(`${type.toUpperCase()}: ${message}`)
      // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  })

  const currentFile = { id, name, size, modified, type, folder }

  const handleClick = (): void => {
    if (isDragMode && canDropHere) {
      onDropHere?.()
    } else if (!isDragMode) {
      onClick?.()
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  const getMenuItems = (): MenuItem[] => {
    if (isDragMode) return []

    const menuItems: MenuItem[] = [
      {
        id: "rename",
        label: "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
        icon: "‚úèÔ∏è",
        onClick: () => handleRename(currentFile)
      }
    ]

    // –î–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    if (type === "file") {
      menuItems.push(
        {
          id: "download",
          label: "–°–∫–∞—á–∞—Ç—å",
          icon: "‚¨áÔ∏è",
          onClick: () => handleDownload(currentFile)
        },
        {
          id: "move",
          label: "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
          icon: "‚û°Ô∏è",
          onClick: () => handleMove(currentFile)
        }
      )
    }

    // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    menuItems.push(
      {
        id: "separator1",
        label: "",
        icon: "",
        separator: true,
        onClick: () => {}
      },
      {
        id: "delete",
        label: "–£–¥–∞–ª–∏—Ç—å",
        icon: "üóëÔ∏è",
        onClick: () => handleDelete(currentFile),
        destructive: true
      },

      {
        id: "separator2",
        label: "",
        icon: "",
        separator: true,
        onClick: () => {}
      },
      {
        id: "info",
        label: "–°–≤–æ–π—Å—Ç–≤–∞",
        icon: "‚ÑπÔ∏è",
        onClick: () => handleShowInfo(currentFile)
      }
    )

    return menuItems
  }

  const itemClasses: string = [
    styles.fileItem,
    className,
    isSelected && styles.selected,
    isDragMode && canDropHere && styles.dropTarget,
    isDragMode && !canDropHere && !isSelected && styles.disabled
  ]
    .filter(Boolean)
    .join(" ")

  return (
    <div className={itemClasses} onClick={handleClick}>
      {/* –ò–∫–æ–Ω–∫–∞ */}
      <span className={styles.icon}>{type === "folder" ? "üìÅ" : "üìÑ"}</span>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className={styles.fileInfo}>
        <div className={styles.fileName}>{name}</div>
        {(size || modified) && (
          <div className={styles.additionalInfo}>
            {size && <span>{size}</span>}
            {size && modified && <span> ‚Ä¢ </span>}
            {modified && <span>{modified}</span>}
          </div>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      {isSelected && <div className={styles.selectedBadge}>‚úÇÔ∏è</div>}

      {isDragMode && canDropHere && (
        <div className={styles.dropHint}>Move here</div>
      )}

      {/* Dropdown menu */}
      {!isDragMode && (
        <div onClick={(e: React.MouseEvent) => e.stopPropagation()}>
          <DropdownMenu items={getMenuItems()} align='left' size='md' />
        </div>
      )}
    </div>
  )
}
